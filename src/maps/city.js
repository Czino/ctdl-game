import { flatten, random } from '../arrayUtils'

const tileSize = 8 // tileSize
let parallax = []
let bg = []
let fg = []

const parsePattern = (pattern, x, y) => pattern
  .map((row, r) => row.map((tile, c) => ({
    x: x + c, y: y + r, tile
  })))
  .reduce(flatten)

const ruinedWall1 = [
  [ [0, 0], [2, 0] ],
  [ [0, 1], [1, 1], [2, 1], [3, 1],]
]
const ruinedWall2 = [
  [ [0, 0], [2, 0] ],
  [ [0, 1], [1, 1], [3, 1] ]
]
const ruinedWall3 = [
  [ [0, 0], [2, 0], [0, 0], [0, 0], [0, 0], [1, 0], [1, 0] ],
  [ [0, 1], [1, 1], [3, 1], [1, 0], [0, 1], [1, 1], [2, 1], [3, 1] ]
]
const ruinedBuilding1 = [
  [ [0, 0], [0, 0], [0, 0], [0, 0],  [0, 0], [0, 1], [0, 7], [0, 7], [3, 2] ],
  [ [1, 0], [0, 0], [0, 0], [2, 0], [0, 1], [1, 8], [0, 7], [0, 7], [3, 2] ],
  [ [3, 4], [3, 1], [0, 0], [0, 7], [0, 7], [1, 9], [3, 4], [2, 10], [3, 2] ],
  [ [3, 4], [3, 10], [0, 7], [0, 7], [0, 7], [1, 10], [3, 4], [3, 10], [3, 2] ],
  [ [3, 10], [0, 7], [0, 7], [0, 7], [1, 10], [3, 4], [3, 4], [0, 7], [3, 2] ],
  [ [2, 10], [0, 7], [1, 8], [0, 7], [3, 4], [1, 8], [3, 10], [0, 7], [3, 2] ],
  [ [3, 4], [2, 10], [1, 9], [1, 10], [3, 4], [1, 9], [2, 10], [0, 7], [3, 2] ],
  [ [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [5, 8], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [5, 9], [3, 4], [3, 4], [2, 4] ],
]
const ruinedBuilding2 = [
  [ [1, 0], [2, 0], [2, 0], [2, 0], [0, 1], [6, 4], [6, 4], [6, 4], [7, 4] ],
  [ [1, 10], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [1, 8], [3, 4], [3, 4], [1, 8], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [1, 9], [3, 4], [3, 4], [1, 9], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [1, 8], [3, 4], [3, 4], [1, 8], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [1, 9], [3, 4], [3, 4], [1, 9], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [1, 8], [3, 4], [3, 4], [1, 8], [3, 4], [3, 10], [3, 2] ],
  [ [3, 4], [3, 4], [1, 9], [3, 4], [3, 4], [1, 9], [3, 4], [2, 10], [3, 2] ],
  [ [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [5, 8], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 4] ],
  [ [3, 4], [3, 4], [5, 9], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 4] ],
]

const justWalls = [
  [ [0, 0], [0, 0], [0, 0], [0, 0],  [2, 0], [0, 1], [0, 7], [0, 7], [3, 1] ],
  [ [0, 0], [0, 0], [0, 0], [0, 1], [0, 7], [0, 7], [0, 7], [0, 7], [3, 2] ],
  [ [1, 0], [0, 0], [0, 1], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [3, 2] ],
]
const conbasebg = [
  [ [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [2, 0], [0, 1], [0, 7], [0, 7], [3, 1] ],
  [ [0, 0], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 1], [0, 7], [0, 7], [0, 7], [0, 7], [3, 2] ],
  [ [0, 0], [0, 0], [0, 1], [0, 7], [0, 7], [3, 1], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 1], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [3, 2] ],
  [ [0, 1], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [3, 2] ],
  [ [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [4, 3], [0, 7], [0, 7], [4, 3], [0, 7], [0, 7], [4, 3], [0, 7], [0, 7], [4, 3], [0, 7], [3, 2] ],
  [ [3, 7], [4, 7], [5, 7], [6, 7], [0, 7], [0, 7], [4, 4], [0, 7], [0, 7], [4, 4], [0, 7], [0, 7], [4, 4], [0, 7], [0, 7], [4, 4], [0, 7], [3, 2] ],
  [ [3, 7], [4, 8], [5, 8], [6, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [3, 2] ],
  [ [3, 7], [4, 8], [5, 9], [6, 8], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [3, 2] ],
  [ [3, 7], [4, 8], [5, 9], [6, 8], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [3, 2] ],
  [ [3, 7], [4, 9], [5, 9], [6, 8], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [3, 2] ],
]
const conbasefg = [
  [],
  [],
  [],
  [ [6, 4], [6, 4], [6, 4], [6, 4], [7, 4] ],
  [ [5, 6], [3, 7], [3, 7], [3, 7], [7, 8] ],
  [ [0, 0], [0, 0], [5, 7], [6, 7], [7, 8] ],
  [ [0, 0], [0, 0], [0, 0], [6, 8], [7, 8] ],
  [ [0, 0], [0, 0], [0, 0], [6, 8], [7, 8] ],
  [ [0, 0], [0, 0], [0, 0], [6, 8], [7, 8] ],
  [ [0, 0], [0, 0], [0, 0], [6, 8], [7, 8], [0, 0], [0, 0], [0, 1], [1, 1], [3, 1], [1, 0], [0, 1], [1, 1], [2, 1], [3, 1] ],
]
const shop = [
  [ [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0], [2, 0], [0, 1], [6, 4], [6, 4], [6, 4], [7, 4] ],
  [ [0, 0], [0, 0], [0, 0], [0, 0], [0, 1], [0, 7], [0, 7], [1, 10], [3, 4], [3, 4], [3, 4], [2, 4] ],
  [ [0, 0], [0, 0], [0, 0], [0, 0], [0, 7], [0, 7], [1, 10], [3, 4], [3, 4], [3, 4], [3, 4], [2, 4] ],
  [ [0, 0], [0, 0], [0, 0], [0, 0], [2, 10], [0, 7], [2, 8], [1, 8], [3, 4], [3, 4], [3, 4], [2, 4] ],
  [ [0, 0], [0, 0], [0, 0], [0, 1], [3, 10], [1, 10], [3, 4], [1, 9], [3, 4], [3, 4], [3, 4], [2, 4] ],
  [ [0, 0], [1, 0], [0, 1], [0, 7], [0, 7], [0, 10], [3, 4], [3, 4], [3, 10], [3, 10], [0, 7], [3, 2] ],
  [ [0, 1], [0, 7], [0, 7], [0, 7], [0, 7], [0, 6], [2, 7], [2, 7], [0, 2], [0, 7], [0, 7], [3, 2] ],
  [ [0, 7], [0, 7], [0, 7], [0, 7], [0, 7], [0, 4], [2, 5], [5, 8], [0, 2], [0, 7], [0, 7], [3, 2] ],
  [ [0, 7], [0, 7], [0, 7], [0, 7], [0, 4], [0, 5], [1, 7], [5, 9], [0, 3], [0, 2], [0, 7], [3, 2] ],
  [ [0, 4], [0, 5], [0, 5], [0, 5], [0, 5], [1, 7], [1, 5], [5, 9], [0, 5], [0, 3], [0, 2], [3, 2] ],
]
const door = [
  [ [5, 8] ],
  [ [5, 9] ],
  [ [5, 9] ]
]

// create random underground texture
const undergroundTiles = [
  [6, 2], [7, 1], [7, 2], [7, 2], [7, 2], [7, 2], [7, 2], [7, 2], [7, 2]
]
for (let i = 0; i < 128; i++) {
  fg.unshift({ x: i, y: 119, tile: random(undergroundTiles) })
}

// create random grass
const grassTiles = [
  [4, 1], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]
]
for (let i = 0; i < 128; i++) {
  fg.unshift({ x: i, y: 118, tile: random(grassTiles) })
}

parallax = parallax.concat(parsePattern(ruinedBuilding1, 10, 108))
parallax = parallax.concat(parsePattern(ruinedBuilding2, 47, 101))
parallax = parallax.concat(parsePattern(ruinedBuilding1, 63, 108))
parallax = parallax.concat(parsePattern(justWalls, 30, 116))
bg = bg.concat(parsePattern(shop, 34, 109))
bg = bg.concat(parsePattern(ruinedWall2, 30, 117))
fg = fg.concat(parsePattern(ruinedWall1, 50, 117))
bg = bg.concat(parsePattern(ruinedBuilding2, 67, 101))
bg = bg.concat(parsePattern(door, 69, 116))
bg = bg.concat(parsePattern(justWalls, 85, 116))
fg = fg.concat(parsePattern(ruinedWall2, 20, 117))
fg = fg.concat(parsePattern(ruinedWall3, 90, 117))
bg = bg.concat(parsePattern(conbasebg, 110, 109))
fg = fg.concat(parsePattern(conbasefg, 110, 109))

export default {
  parallax: parallax.map(tile => ({
    x: tile.x * tileSize,
    y: tile.y * tileSize + 2,
    tile: tile.tile.map(coord => coord * tileSize),
    w: tileSize,
    h: tileSize
  })),
  bg: bg.map(tile => ({
    x: tile.x * tileSize,
    y: tile.y * tileSize + 2,
    tile: tile.tile.map(coord => coord * tileSize),
    w: tileSize,
    h: tileSize
  })),
  fg: fg.map(tile => ({
    x: tile.x * tileSize,
    y: tile.y * tileSize + 2,
    tile: tile.tile.map(coord => coord * tileSize),
    w: tileSize,
    h: tileSize
  }))
}